lesson_2_reflections.txt

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When two branches are merged together you get a working master branch, it is merging a feature branch into the master branch. This results in deletion of feature branch name, but NOT the deletion of the commitID of the features. The diagram is represented that way to indicate the reachability of each commitID to the working master branch. Thus allowing the programmer to see where a detach HEAD might be.

How do the diagrams help you visualize the branch structure?

The branch structure help identify all the files being worked on, where the master file is, which files are connected to the master file, and if there are ANY DETACHED HEAD/Uncommited file. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you need to make a change or create an experiemntal feature to your working master directory creating a branch or branches would be the most practical way of assuring your master file remains untouched and bug free. The branches would allow you to test out the experimental features in a seperate but identical working directory.

How can you use the staging area to make sure you have one commit per logical change?

When you make a change in the working directory, save the change, exit the text editor
Use command line git status to view the changes to the working directory file...keep in mind this change is not yet staged. 
Use the command line--git add <filename>, this add file from working directory to staging area...keep in mind this file isnt commited to the repository yet
Use command line git commit..to commit change made in the working directory that was kept in the staging area

What happens when you initialize a repository? Why do you need to do it?

When you git init the command creates a new .git file for your repository. Without a .git file you will not be able to make commits and will not be able to save versions of the files you've made changes to.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is where you put things from the working directory before you make a commit to the repository with the git add command line. 